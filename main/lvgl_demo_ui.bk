/*
 * SPDX-FileCopyrightText: 2022 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: CC0-1.0
 */

// This demo UI is adapted from LVGL official example: https://docs.lvgl.io/master/examples.html#scatter-chart

#include "lvgl.h"
#include <stdio.h>

static void draw_event_cb(lv_event_t *e)
{
    lv_obj_draw_part_dsc_t *dsc = lv_event_get_draw_part_dsc(e);
    if (dsc->part == LV_PART_ITEMS) {
        lv_obj_t *obj = lv_event_get_target(e);
        lv_chart_series_t *ser = lv_chart_get_series_next(obj, NULL);
        uint32_t cnt = lv_chart_get_point_count(obj);
        /*Make older value more transparent*/
        dsc->rect_dsc->bg_opa = (LV_OPA_COVER *  dsc->id) / (cnt - 1);

        /*Make smaller values blue, higher values red*/
        lv_coord_t *x_array = lv_chart_get_x_array(obj, ser);
        lv_coord_t *y_array = lv_chart_get_y_array(obj, ser);
        /*dsc->id is the tells drawing order, but we need the ID of the point being drawn.*/
        uint32_t start_point = lv_chart_get_x_start_point(obj, ser);
        uint32_t p_act = (start_point + dsc->id) % cnt; /*Consider start point to get the index of the array*/
        lv_opa_t x_opa = (x_array[p_act] * LV_OPA_50) / 200;
        lv_opa_t y_opa = (y_array[p_act] * LV_OPA_50) / 1000;

        dsc->rect_dsc->bg_color = lv_color_mix(lv_palette_main(LV_PALETTE_RED),
                                               lv_palette_main(LV_PALETTE_BLUE),
                                               x_opa + y_opa);
    }
}

static void add_data(lv_timer_t *timer)
{
    static uint32_t _idx = 0;
    lv_obj_t *chart = timer->user_data;
    lv_chart_set_next_value2(chart, lv_chart_get_series_next(chart, NULL), lv_rand(0, 200), lv_rand(0, 1000));
}


lv_obj_t * img_obj ;
LV_IMG_DECLARE(test_img_0);
LV_IMG_DECLARE(test_img_1);
static void _add_data(lv_timer_t *timer)
{
    static uint32_t _idx = 0;
    int num = (_idx++)%3;
    //lv_obj_t *parent = timer->user_data;
    if(num == 0){
        //lv_obj_set_style_bg_color(parent, lv_palette_main(LV_PALETTE_RED), 0);
        lv_img_set_src(img_obj, &test_img_0);
    }else if(num == 1){
        //lv_obj_set_style_bg_color(parent, lv_palette_main(LV_PALETTE_YELLOW), 0);
        lv_img_set_src(img_obj, &test_img_1);
    }else if(num == 2){
        lv_img_set_src(img_obj, &test_img_0);
        //lv_obj_set_style_bg_color(parent, lv_palette_main(LV_PALETTE_ORANGE), 0);
    }else{
        lv_img_set_src(img_obj, &test_img_1);
        //lv_obj_set_style_bg_color(parent, lv_palette_main(LV_PALETTE_NONE), 0);
    }
    
    // //lv_chart_set_next_value2(chart, lv_chart_get_series_next(chart, NULL), lv_rand(0, 200), lv_rand(0, 1000));
}

static void event_cb(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);    // 获取当前部件(对象)触发的事件代码
    lv_obj_t * label = lv_event_get_user_data(e);    // 读取到标签对象
    printf("<<<<<<<<<<<<<<<=event[%d]\n",code );
    switch(code) {
    case LV_EVENT_PRESSED:    // 按下
        lv_label_set_text(label, "The last button event:\nLV_EVENT_PRESSED");
        break;
    case LV_EVENT_CLICKED:    // 按下且松开
        lv_label_set_text(label, "The last button event:\nLV_EVENT_CLICKED");
        break;
    case LV_EVENT_LONG_PRESSED:    // 按下指定多少时间
        lv_label_set_text(label, "The last button event:\nLV_EVENT_LONG_PRESSED");
        break;
    case LV_EVENT_LONG_PRESSED_REPEAT:    // 类似上面但又不同
        lv_label_set_text(label, "The last button event:\nLV_EVENT_LONG_PRESSED_REPEAT");
        break;
    default:
        break;
    }
}

void example_lvgl_demo_ui(lv_disp_t *disp)
{
  /*Create an Arc*/
  lv_obj_t * arc = lv_arc_create(lv_scr_act());
  lv_obj_set_size(arc, 150, 150);
  lv_arc_set_rotation(arc, 135);
  lv_arc_set_bg_angles(arc, 0, 270);
  lv_arc_set_value(arc, 40);
  lv_obj_center(arc);
}

void _example_lvgl_demo_ui(lv_disp_t *disp){



    lv_obj_t * btn = lv_btn_create(lv_scr_act());    // 创建按钮对象
    lv_obj_set_size(btn, 400, 200);
    lv_obj_center(btn);

    lv_obj_t * btn_label = lv_label_create(btn);     // 创建标签
    lv_label_set_text(btn_label, "Click me!");
    lv_obj_center(btn_label);

    lv_obj_t * info_label = lv_label_create(lv_scr_act());    //创建标签
    lv_label_set_text(info_label, "The last button event:\nNone");

    lv_obj_add_event_cb(btn, event_cb, LV_EVENT_ALL, info_label);    // btn的事件，并传入标签对象

    // img_obj = lv_img_create(lv_scr_act());
    // lv_img_set_src(img_obj, &test_img_0);
    // lv_timer_create(_add_data, 1000, img_obj);
#if 0    
    lv_obj_t * parent = lv_obj_create(lv_scr_act());  
    lv_obj_set_size(parent, 480, 480);	                
    lv_obj_set_pos(parent, 0, 0);



    lv_obj_set_style_bg_color(parent, lv_palette_main(LV_PALETTE_BLUE), 0);

    lv_obj_t * label = lv_label_create(parent);
    lv_label_set_text(label, "HELLOW LVGL");

    lv_timer_create(_add_data, 1000, parent);
#endif
    return ;
}


